from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, JSON, Float
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func # for default timestamps

from app.database import Base

class Itinerary(Base):
    __tablename__ = "itineraries"

    id = Column(Integer, primary_key=True, index=True)
    trip_id = Column(Integer, ForeignKey("trips.id"), nullable=False)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False) # For quick user lookup
    generated_at = Column(DateTime(timezone=True), server_default=func.now())
    version = Column(Integer, default=1) # Useful if users re-generate multiple versions

    # This JSON column will store the entire structured and optimized itinerary generated by your AI agent.
    # It will contain the daily breakdown, activities, times, associated attraction IDs, etc.
    # Example structure:
    # {
    #   "days": [
    #     {
    #       "day_number": 1,
    #       "date": "2025-07-16",
    #       "activities": [
    #         {
    #           "name": "Faro de Moncloa",
    #           "attraction_id": 123, # Link to your local Attraction ID
    #           "start_time": "15:30",
    #           "end_time": "17:00",
    #           "description": "Panoramic views...",
    #           "estimated_cost": 4.0,
    #           "estimated_duration_minutes": 90,
    #           "transport_to_next": "walk (5 min)",
    #           "lunch_option": {"name": "Local Tapas Bar", "cost": 15.0} # Can be nested for meals
    #         },
    #         # ... more activities
    #       ]
    #     },
    #     # ... more days
    #   ]
    # }
    plan_data = Column(JSON, nullable=False)

    # Aggregated metrics for the entire itinerary, calculated by your backend logic
    total_estimated_cost = Column(Float)
    total_estimated_duration_minutes = Column(Integer) # Total time spent on activities/travel

    # Relationships:
    # An Itinerary belongs to one Trip
    trip_info = relationship("Trip", back_populates="itineraries")
    # An Itinerary belongs to one User
    user_owner = relationship("User", back_populates="itineraries")

    def __repr__(self):
        return (f"<Itinerary(id={self.id}, trip_id={self.trip_id}, "
                f"generated_at={self.generated_at}, total_cost={self.total_estimated_cost})>")